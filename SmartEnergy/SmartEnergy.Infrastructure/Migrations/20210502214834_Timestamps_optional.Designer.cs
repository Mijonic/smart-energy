// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartEnergy.Infrastructure;

namespace SmartEnergy.Infrastructure.Migrations
{
    [DbContext(typeof(SmartEnergyDbContext))]
    [Migration("20210502214834_Timestamps_optional")]
    partial class Timestamps_optional
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartEnergyDomainModels.Call", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsumerID")
                        .HasColumnType("int");

                    b.Property<string>("Hazard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncidentID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ConsumerID");

                    b.HasIndex("IncidentID");

                    b.HasIndex("LocationID");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Consumer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Crew", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CrewName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Device", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceCounter")
                        .HasColumnType("int");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.DeviceUsage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceID")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentID")
                        .HasColumnType("int");

                    b.Property<int?>("SafetyDocumentID")
                        .HasColumnType("int");

                    b.Property<int?>("WorkPlanID")
                        .HasColumnType("int");

                    b.Property<int?>("WorkRequestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("IncidentID");

                    b.HasIndex("SafetyDocumentID");

                    b.HasIndex("WorkPlanID");

                    b.HasIndex("WorkRequestID");

                    b.ToTable("DeviceUsages");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Icon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IconType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("SettingsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SettingsID");

                    b.ToTable("Icons");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Incident", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ATA")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("CrewID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ETA")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ETR")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IncidentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<double?>("VoltageLevel")
                        .HasColumnType("float");

                    b.Property<DateTime?>("WorkBeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CrewID");

                    b.HasIndex("MultimediaAnchorID")
                        .IsUnique()
                        .HasFilter("[MultimediaAnchorID] IS NOT NULL");

                    b.HasIndex("NotificationAnchorID")
                        .IsUnique()
                        .HasFilter("[NotificationAnchorID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Instruction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DeviceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("bit");

                    b.Property<int>("WorkPlanID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("WorkPlanID");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MorningPriority")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("NightPriority")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("NoonPriority")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.MultimediaAnchor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("MultimediaAnchors");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.MultimediaAttachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MultimediaAnchorID");

                    b.ToTable("MultimediaAttachments");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NotificationAnchorID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.NotificationAnchor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("NotificationAnchors");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Resolution", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Construction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncidentID")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subcause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IncidentID")
                        .IsUnique();

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.SafetyDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GroundingRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<bool>("OperationCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Ready")
                        .HasColumnType("bit");

                    b.Property<int?>("StateChangeAnchorID")
                        .HasColumnType("int");

                    b.Property<bool>("TagsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkPlanID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MultimediaAnchorID")
                        .IsUnique()
                        .HasFilter("[MultimediaAnchorID] IS NOT NULL");

                    b.HasIndex("NotificationAnchorID")
                        .IsUnique()
                        .HasFilter("[NotificationAnchorID] IS NOT NULL");

                    b.HasIndex("StateChangeAnchorID")
                        .IsUnique()
                        .HasFilter("[StateChangeAnchorID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkPlanID");

                    b.ToTable("SafetyDocuments");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Settings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDefault")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowErrors")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowInfo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowNonRequiredFields")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowSuccess")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowWarnings")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.StateChangeAnchor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("StateChangeAnchors");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.StateChangeHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateChangeAnchorID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StateChangeAnchorID");

                    b.HasIndex("UserID");

                    b.ToTable("StateChangeHistories");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CrewID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("PENDING");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.HasIndex("CrewID");

                    b.HasIndex("LocationID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.WorkPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StateChangeAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkRequestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MultimediaAnchorID")
                        .IsUnique()
                        .HasFilter("[MultimediaAnchorID] IS NOT NULL");

                    b.HasIndex("NotificationAnchorID")
                        .IsUnique()
                        .HasFilter("[NotificationAnchorID] IS NOT NULL");

                    b.HasIndex("StateChangeAnchorID")
                        .IsUnique()
                        .HasFilter("[StateChangeAnchorID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkRequestID")
                        .IsUnique();

                    b.ToTable("WorkPlans");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.WorkRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncidentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("bit");

                    b.Property<int?>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StateChangeAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IncidentID")
                        .IsUnique();

                    b.HasIndex("MultimediaAnchorID")
                        .IsUnique()
                        .HasFilter("[MultimediaAnchorID] IS NOT NULL");

                    b.HasIndex("NotificationAnchorID")
                        .IsUnique()
                        .HasFilter("[NotificationAnchorID] IS NOT NULL");

                    b.HasIndex("StateChangeAnchorID")
                        .IsUnique()
                        .HasFilter("[StateChangeAnchorID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("WorkRequests");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Call", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Consumer", "Consumer")
                        .WithMany("Calls")
                        .HasForeignKey("ConsumerID");

                    b.HasOne("SmartEnergyDomainModels.Incident", "Incident")
                        .WithMany("Calls")
                        .HasForeignKey("IncidentID");

                    b.HasOne("SmartEnergyDomainModels.Location", "Location")
                        .WithMany("Calls")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");

                    b.Navigation("Incident");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Consumer", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Location", "Location")
                        .WithMany("Consumers")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartEnergyDomainModels.User", "User")
                        .WithOne("Consumer")
                        .HasForeignKey("SmartEnergyDomainModels.Consumer", "UserID");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Device", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Location", "Location")
                        .WithMany("Devices")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.DeviceUsage", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Device", "Device")
                        .WithMany("DeviceUsage")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartEnergyDomainModels.Incident", "Incident")
                        .WithMany("IncidentDevices")
                        .HasForeignKey("IncidentID");

                    b.HasOne("SmartEnergyDomainModels.SafetyDocument", "SafetyDocument")
                        .WithMany("DeviceUsages")
                        .HasForeignKey("SafetyDocumentID");

                    b.HasOne("SmartEnergyDomainModels.WorkPlan", "WorkPlan")
                        .WithMany("WorkPlanDevices")
                        .HasForeignKey("WorkPlanID");

                    b.HasOne("SmartEnergyDomainModels.WorkRequest", "WorkRequest")
                        .WithMany("DeviceUsage")
                        .HasForeignKey("WorkRequestID");

                    b.Navigation("Device");

                    b.Navigation("Incident");

                    b.Navigation("SafetyDocument");

                    b.Navigation("WorkPlan");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Icon", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Settings", "Settings")
                        .WithMany("Icons")
                        .HasForeignKey("SettingsID");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Incident", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Crew", "Crew")
                        .WithMany("Incidents")
                        .HasForeignKey("CrewID");

                    b.HasOne("SmartEnergyDomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithOne("Incident")
                        .HasForeignKey("SmartEnergyDomainModels.Incident", "MultimediaAnchorID");

                    b.HasOne("SmartEnergyDomainModels.NotificationAnchor", "NotificationAnchor")
                        .WithOne("Incident")
                        .HasForeignKey("SmartEnergyDomainModels.Incident", "NotificationAnchorID");

                    b.HasOne("SmartEnergyDomainModels.User", "User")
                        .WithMany("Incidents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("MultimediaAnchor");

                    b.Navigation("NotificationAnchor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Instruction", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Device", "Device")
                        .WithMany("Instructions")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartEnergyDomainModels.WorkPlan", "WorkPlan")
                        .WithMany("Instructions")
                        .HasForeignKey("WorkPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.MultimediaAttachment", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithMany("MultimediaAttachments")
                        .HasForeignKey("MultimediaAnchorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultimediaAnchor");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Notification", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.NotificationAnchor", "NotificationAnchor")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationAnchorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartEnergyDomainModels.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationAnchor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Resolution", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Incident", "Incident")
                        .WithOne("Resolution")
                        .HasForeignKey("SmartEnergyDomainModels.Resolution", "IncidentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.SafetyDocument", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithOne("SafetyDocument")
                        .HasForeignKey("SmartEnergyDomainModels.SafetyDocument", "MultimediaAnchorID");

                    b.HasOne("SmartEnergyDomainModels.NotificationAnchor", "NotificationAnchor")
                        .WithOne("SafetyDocument")
                        .HasForeignKey("SmartEnergyDomainModels.SafetyDocument", "NotificationAnchorID");

                    b.HasOne("SmartEnergyDomainModels.StateChangeAnchor", "StateChangeAnchor")
                        .WithOne("SafetyDocument")
                        .HasForeignKey("SmartEnergyDomainModels.SafetyDocument", "StateChangeAnchorID");

                    b.HasOne("SmartEnergyDomainModels.User", "User")
                        .WithMany("SafetyDocuments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartEnergyDomainModels.WorkPlan", "WorkPlan")
                        .WithMany("SafetyDocuments")
                        .HasForeignKey("WorkPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultimediaAnchor");

                    b.Navigation("NotificationAnchor");

                    b.Navigation("StateChangeAnchor");

                    b.Navigation("User");

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.StateChangeHistory", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.StateChangeAnchor", "StateChangeAnchor")
                        .WithMany("StateChangeHistories")
                        .HasForeignKey("StateChangeAnchorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartEnergyDomainModels.User", "User")
                        .WithMany("StateChanges")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateChangeAnchor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.User", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Crew", "Crew")
                        .WithMany("CrewMembers")
                        .HasForeignKey("CrewID");

                    b.HasOne("SmartEnergyDomainModels.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.WorkPlan", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithOne("WorkPlan")
                        .HasForeignKey("SmartEnergyDomainModels.WorkPlan", "MultimediaAnchorID");

                    b.HasOne("SmartEnergyDomainModels.NotificationAnchor", "NotificationAnchor")
                        .WithOne("WorkPlan")
                        .HasForeignKey("SmartEnergyDomainModels.WorkPlan", "NotificationAnchorID");

                    b.HasOne("SmartEnergyDomainModels.StateChangeAnchor", "StateChangeAnchor")
                        .WithOne("WorkPlan")
                        .HasForeignKey("SmartEnergyDomainModels.WorkPlan", "StateChangeAnchorID");

                    b.HasOne("SmartEnergyDomainModels.User", "User")
                        .WithMany("WorkPlans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartEnergyDomainModels.WorkRequest", "WorkRequest")
                        .WithOne("WorkPlan")
                        .HasForeignKey("SmartEnergyDomainModels.WorkPlan", "WorkRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultimediaAnchor");

                    b.Navigation("NotificationAnchor");

                    b.Navigation("StateChangeAnchor");

                    b.Navigation("User");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.WorkRequest", b =>
                {
                    b.HasOne("SmartEnergyDomainModels.Incident", "Incident")
                        .WithOne("WorkRequest")
                        .HasForeignKey("SmartEnergyDomainModels.WorkRequest", "IncidentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartEnergyDomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithOne("WorkRequest")
                        .HasForeignKey("SmartEnergyDomainModels.WorkRequest", "MultimediaAnchorID");

                    b.HasOne("SmartEnergyDomainModels.NotificationAnchor", "NotificationsAnchor")
                        .WithOne("WorkRequest")
                        .HasForeignKey("SmartEnergyDomainModels.WorkRequest", "NotificationAnchorID");

                    b.HasOne("SmartEnergyDomainModels.StateChangeAnchor", "StateChangeAnchor")
                        .WithOne("WorkRequest")
                        .HasForeignKey("SmartEnergyDomainModels.WorkRequest", "StateChangeAnchorID");

                    b.HasOne("SmartEnergyDomainModels.User", "User")
                        .WithMany("WorkRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("MultimediaAnchor");

                    b.Navigation("NotificationsAnchor");

                    b.Navigation("StateChangeAnchor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Consumer", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Crew", b =>
                {
                    b.Navigation("CrewMembers");

                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Device", b =>
                {
                    b.Navigation("DeviceUsage");

                    b.Navigation("Instructions");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Incident", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("IncidentDevices");

                    b.Navigation("Resolution");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Location", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("Consumers");

                    b.Navigation("Devices");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.MultimediaAnchor", b =>
                {
                    b.Navigation("Incident");

                    b.Navigation("MultimediaAttachments");

                    b.Navigation("SafetyDocument");

                    b.Navigation("WorkPlan");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.NotificationAnchor", b =>
                {
                    b.Navigation("Incident");

                    b.Navigation("Notifications");

                    b.Navigation("SafetyDocument");

                    b.Navigation("WorkPlan");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.SafetyDocument", b =>
                {
                    b.Navigation("DeviceUsages");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.Settings", b =>
                {
                    b.Navigation("Icons");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.StateChangeAnchor", b =>
                {
                    b.Navigation("SafetyDocument");

                    b.Navigation("StateChangeHistories");

                    b.Navigation("WorkPlan");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.User", b =>
                {
                    b.Navigation("Consumer");

                    b.Navigation("Incidents");

                    b.Navigation("Notifications");

                    b.Navigation("SafetyDocuments");

                    b.Navigation("StateChanges");

                    b.Navigation("WorkPlans");

                    b.Navigation("WorkRequests");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.WorkPlan", b =>
                {
                    b.Navigation("Instructions");

                    b.Navigation("SafetyDocuments");

                    b.Navigation("WorkPlanDevices");
                });

            modelBuilder.Entity("SmartEnergyDomainModels.WorkRequest", b =>
                {
                    b.Navigation("DeviceUsage");

                    b.Navigation("WorkPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
